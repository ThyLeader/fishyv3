// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// BaitInventory represents a row from 'public.bait_inventory'.
type BaitInventory struct {
	User      string `json:"user"`      // user
	Tier1     int    `json:"tier_1"`    // tier_1
	Tier2     int    `json:"tier_2"`    // tier_2
	Tier3     int    `json:"tier_3"`    // tier_3
	Tier4     int    `json:"tier_4"`    // tier_4
	Tier5     int    `json:"tier_5"`    // tier_5
	Current   int    `json:"current"`   // current
	Gathering bool   `json:"gathering"` // gathering

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BaitInventory exists in the database.
func (bi *BaitInventory) Exists() bool {
	return bi._exists
}

// Deleted provides information if the BaitInventory has been deleted from the database.
func (bi *BaitInventory) Deleted() bool {
	return bi._deleted
}

// Insert inserts the BaitInventory to the database.
func (bi *BaitInventory) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if bi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.bait_inventory (` +
		`"user", "tier_1", "tier_2", "tier_3", "tier_4", "tier_5", "current", "gathering"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)`

	// run query
	XOLog(sqlstr, bi.User, bi.Tier1, bi.Tier2, bi.Tier3, bi.Tier4, bi.Tier5, bi.Current, bi.Gathering)
	err = db.QueryRow(sqlstr, bi.User, bi.Tier1, bi.Tier2, bi.Tier3, bi.Tier4, bi.Tier5, bi.Current, bi.Gathering).Scan(&bi.User)
	if err != nil {
		return err
	}

	// set existence
	bi._exists = true

	return nil
}

// Update updates the BaitInventory in the database.
func (bi *BaitInventory) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !bi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if bi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.bait_inventory SET (` +
		`"tier_1", "tier_2", "tier_3", "tier_4", "tier_5", "current", "gathering"` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE "user" = $8`

	// run query
	XOLog(sqlstr, bi.Tier1, bi.Tier2, bi.Tier3, bi.Tier4, bi.Tier5, bi.Current, bi.Gathering, bi.User)
	_, err = db.Exec(sqlstr, bi.Tier1, bi.Tier2, bi.Tier3, bi.Tier4, bi.Tier5, bi.Current, bi.Gathering, bi.User)
	return err
}

// Save saves the BaitInventory to the database.
func (bi *BaitInventory) Save(db XODB) error {
	if bi.Exists() {
		return bi.Update(db)
	}

	return bi.Insert(db)
}

// Upsert performs an upsert for BaitInventory.
//
// NOTE: PostgreSQL 9.5+ only
func (bi *BaitInventory) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if bi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.bait_inventory (` +
		`"user", "tier_1", "tier_2", "tier_3", "tier_4", "tier_5", "current", "gathering"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT ("user") DO UPDATE SET (` +
		`"user", "tier_1", "tier_2", "tier_3", "tier_4", "tier_5", "current", "gathering"` +
		`) = (` +
		`EXCLUDED."user", EXCLUDED."tier_1", EXCLUDED."tier_2", EXCLUDED."tier_3", EXCLUDED."tier_4", EXCLUDED."tier_5", EXCLUDED."current", EXCLUDED."gathering"` +
		`)`

	// run query
	XOLog(sqlstr, bi.User, bi.Tier1, bi.Tier2, bi.Tier3, bi.Tier4, bi.Tier5, bi.Current, bi.Gathering)
	_, err = db.Exec(sqlstr, bi.User, bi.Tier1, bi.Tier2, bi.Tier3, bi.Tier4, bi.Tier5, bi.Current, bi.Gathering)
	if err != nil {
		return err
	}

	// set existence
	bi._exists = true

	return nil
}

// Delete deletes the BaitInventory from the database.
func (bi *BaitInventory) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !bi._exists {
		return nil
	}

	// if deleted, bail
	if bi._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.bait_inventory WHERE "user" = $1`

	// run query
	XOLog(sqlstr, bi.User)
	_, err = db.Exec(sqlstr, bi.User)
	if err != nil {
		return err
	}

	// set deleted
	bi._deleted = true

	return nil
}

// BaitInventoryByUser retrieves a row from 'public.bait_inventory' as a BaitInventory.
//
// Generated from index 'inventory_pkey'.
func BaitInventoryByUser(db XODB, user string) (*BaitInventory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"user", "tier_1", "tier_2", "tier_3", "tier_4", "tier_5", "current", "gathering" ` +
		`FROM public.bait_inventory ` +
		`WHERE "user" = $1`

	// run query
	XOLog(sqlstr, user)
	bi := BaitInventory{}

	err = db.QueryRow(sqlstr, user).Scan(&bi.User, &bi.Tier1, &bi.Tier2, &bi.Tier3, &bi.Tier4, &bi.Tier5, &bi.Current, &bi.Gathering)
	if err != nil {
		return &bi, err
	}

	bi._exists = true
	return &bi, nil
}
