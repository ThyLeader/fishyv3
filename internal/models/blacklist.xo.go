// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Blacklist represents a row from 'public.blacklist'.
type Blacklist struct {
	ID   int    `json:"id"`   // id
	User string `json:"user"` // user

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Blacklist exists in the database.
func (b *Blacklist) Exists() bool {
	return b._exists
}

// Deleted provides information if the Blacklist has been deleted from the database.
func (b *Blacklist) Deleted() bool {
	return b._deleted
}

// Insert inserts the Blacklist to the database.
func (b *Blacklist) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.blacklist (` +
		`"user"` +
		`) VALUES (` +
		`$1` +
		`) RETURNING "id"`

	// run query
	XOLog(sqlstr, b.User)
	err = db.QueryRow(sqlstr, b.User).Scan(&b.ID)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Update updates the Blacklist in the database.
func (b *Blacklist) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.blacklist SET (` +
		`"user"` +
		`) = ( ` +
		`$1` +
		`) WHERE "id" = $2`

	// run query
	XOLog(sqlstr, b.User, b.ID)
	_, err = db.Exec(sqlstr, b.User, b.ID)
	return err
}

// Save saves the Blacklist to the database.
func (b *Blacklist) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Insert(db)
}

// Upsert performs an upsert for Blacklist.
//
// NOTE: PostgreSQL 9.5+ only
func (b *Blacklist) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.blacklist (` +
		`"id", "user"` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT ("id") DO UPDATE SET (` +
		`"id", "user"` +
		`) = (` +
		`EXCLUDED."id", EXCLUDED."user"` +
		`)`

	// run query
	XOLog(sqlstr, b.ID, b.User)
	_, err = db.Exec(sqlstr, b.ID, b.User)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Delete deletes the Blacklist from the database.
func (b *Blacklist) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.blacklist WHERE "id" = $1`

	// run query
	XOLog(sqlstr, b.ID)
	_, err = db.Exec(sqlstr, b.ID)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

// BlacklistByID retrieves a row from 'public.blacklist' as a Blacklist.
//
// Generated from index 'blacklist_pkey'.
func BlacklistByID(db XODB, id int) (*Blacklist, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "user" ` +
		`FROM public.blacklist ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	b := Blacklist{}

	err = db.QueryRow(sqlstr, id).Scan(&b.ID, &b.User)
	if err != nil {
		return &b, err
	}

	b._exists = true
	return &b, nil
}

// BlacklistByUser retrieves a row from 'public.blacklist' as a Blacklist.
//
// Generated from index 'user'.
func BlacklistByUser(db XODB, user string) (*Blacklist, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "user" ` +
		`FROM public.blacklist ` +
		`WHERE "user" = $1`

	// run query
	XOLog(sqlstr, user)
	b := Blacklist{}

	err = db.QueryRow(sqlstr, user).Scan(&b.ID, &b.User)
	if err != nil {
		return &b, err
	}

	b._exists = true
	return &b, nil
}
