// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// EasterEgg represents a row from 'public.easter_eggs'.
type EasterEgg struct {
	ID        int           `json:"id"`         // id
	User      string        `json:"user"`       // user
	EasterEgg EasterEggType `json:"easter_egg"` // easter_egg
	Amt       sql.NullInt64 `json:"amt"`        // amt

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the EasterEgg exists in the database.
func (ee *EasterEgg) Exists() bool {
	return ee._exists
}

// Deleted provides information if the EasterEgg has been deleted from the database.
func (ee *EasterEgg) Deleted() bool {
	return ee._deleted
}

// Insert inserts the EasterEgg to the database.
func (ee *EasterEgg) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ee._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.easter_eggs (` +
		`"user", "easter_egg", "amt"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING "id"`

	// run query
	XOLog(sqlstr, ee.User, ee.EasterEgg, ee.Amt)
	err = db.QueryRow(sqlstr, ee.User, ee.EasterEgg, ee.Amt).Scan(&ee.ID)
	if err != nil {
		return err
	}

	// set existence
	ee._exists = true

	return nil
}

// Update updates the EasterEgg in the database.
func (ee *EasterEgg) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ee._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ee._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.easter_eggs SET (` +
		`"user", "easter_egg", "amt"` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE "id" = $4`

	// run query
	XOLog(sqlstr, ee.User, ee.EasterEgg, ee.Amt, ee.ID)
	_, err = db.Exec(sqlstr, ee.User, ee.EasterEgg, ee.Amt, ee.ID)
	return err
}

// Save saves the EasterEgg to the database.
func (ee *EasterEgg) Save(db XODB) error {
	if ee.Exists() {
		return ee.Update(db)
	}

	return ee.Insert(db)
}

// Upsert performs an upsert for EasterEgg.
//
// NOTE: PostgreSQL 9.5+ only
func (ee *EasterEgg) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ee._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.easter_eggs (` +
		`"id", "user", "easter_egg", "amt"` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT ("id") DO UPDATE SET (` +
		`"id", "user", "easter_egg", "amt"` +
		`) = (` +
		`EXCLUDED."id", EXCLUDED."user", EXCLUDED."easter_egg", EXCLUDED."amt"` +
		`)`

	// run query
	XOLog(sqlstr, ee.ID, ee.User, ee.EasterEgg, ee.Amt)
	_, err = db.Exec(sqlstr, ee.ID, ee.User, ee.EasterEgg, ee.Amt)
	if err != nil {
		return err
	}

	// set existence
	ee._exists = true

	return nil
}

// Delete deletes the EasterEgg from the database.
func (ee *EasterEgg) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ee._exists {
		return nil
	}

	// if deleted, bail
	if ee._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.easter_eggs WHERE "id" = $1`

	// run query
	XOLog(sqlstr, ee.ID)
	_, err = db.Exec(sqlstr, ee.ID)
	if err != nil {
		return err
	}

	// set deleted
	ee._deleted = true

	return nil
}

// EasterEggByID retrieves a row from 'public.easter_eggs' as a EasterEgg.
//
// Generated from index 'easter_eggs_pkey'.
func EasterEggByID(db XODB, id int) (*EasterEgg, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "user", "easter_egg", "amt" ` +
		`FROM public.easter_eggs ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	ee := EasterEgg{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ee.ID, &ee.User, &ee.EasterEgg, &ee.Amt)
	if err != nil {
		return nil, err
	}

	return &ee, nil
}

// EasterEggByUserEasterEgg retrieves a row from 'public.easter_eggs' as a EasterEgg.
//
// Generated from index 'user_easter_egg'.
func EasterEggByUserEasterEgg(db XODB, user string, easterEgg EasterEggType) (*EasterEgg, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "user", "easter_egg", "amt" ` +
		`FROM public.easter_eggs ` +
		`WHERE "user" = $1 AND "easter_egg" = $2`

	// run query
	XOLog(sqlstr, user, easterEgg)
	ee := EasterEgg{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, user, easterEgg).Scan(&ee.ID, &ee.User, &ee.EasterEgg, &ee.Amt)
	if err != nil {
		return nil, err
	}

	return &ee, nil
}
