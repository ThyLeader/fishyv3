// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// EquippedItem represents a row from 'public.equipped_items'.
type EquippedItem struct {
	User    string `json:"user"`     // user
	Bait    int    `json:"bait"`     // bait
	Rod     int    `json:"rod"`      // rod
	Hook    int    `json:"hook"`     // hook
	Vehicle int    `json:"vehicle"`  // vehicle
	BaitBox int    `json:"bait_box"` // bait_box

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the EquippedItem exists in the database.
func (ei *EquippedItem) Exists() bool {
	return ei._exists
}

// Deleted provides information if the EquippedItem has been deleted from the database.
func (ei *EquippedItem) Deleted() bool {
	return ei._deleted
}

// Insert inserts the EquippedItem to the database.
func (ei *EquippedItem) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ei._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.equipped_items (` +
		`"user", "bait", "rod", "hook", "vehicle", "bait_box"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING "user"`

	// run query
	XOLog(sqlstr, ei.User, ei.Bait, ei.Rod, ei.Hook, ei.Vehicle, ei.BaitBox)
	err = db.QueryRow(sqlstr, ei.User, ei.Bait, ei.Rod, ei.Hook, ei.Vehicle, ei.BaitBox).Scan(&ei.User)
	if err != nil {
		return err
	}

	// set existence
	ei._exists = true

	return nil
}

// Update updates the EquippedItem in the database.
func (ei *EquippedItem) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ei._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ei._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.equipped_items SET (` +
		`"bait", "rod", "hook", "vehicle", "bait_box"` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE "user" = $6`

	// run query
	XOLog(sqlstr, ei.Bait, ei.Rod, ei.Hook, ei.Vehicle, ei.BaitBox, ei.User)
	_, err = db.Exec(sqlstr, ei.Bait, ei.Rod, ei.Hook, ei.Vehicle, ei.BaitBox, ei.User)
	return err
}

// Save saves the EquippedItem to the database.
func (ei *EquippedItem) Save(db XODB) error {
	if ei.Exists() {
		return ei.Update(db)
	}

	return ei.Insert(db)
}

// Upsert performs an upsert for EquippedItem.
//
// NOTE: PostgreSQL 9.5+ only
func (ei *EquippedItem) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ei._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.equipped_items (` +
		`"user", "bait", "rod", "hook", "vehicle", "bait_box"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT ("user") DO UPDATE SET (` +
		`"user", "bait", "rod", "hook", "vehicle", "bait_box"` +
		`) = (` +
		`EXCLUDED."user", EXCLUDED."bait", EXCLUDED."rod", EXCLUDED."hook", EXCLUDED."vehicle", EXCLUDED."bait_box"` +
		`)`

	// run query
	XOLog(sqlstr, ei.User, ei.Bait, ei.Rod, ei.Hook, ei.Vehicle, ei.BaitBox)
	_, err = db.Exec(sqlstr, ei.User, ei.Bait, ei.Rod, ei.Hook, ei.Vehicle, ei.BaitBox)
	if err != nil {
		return err
	}

	// set existence
	ei._exists = true

	return nil
}

// Delete deletes the EquippedItem from the database.
func (ei *EquippedItem) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ei._exists {
		return nil
	}

	// if deleted, bail
	if ei._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.equipped_items WHERE "user" = $1`

	// run query
	XOLog(sqlstr, ei.User)
	_, err = db.Exec(sqlstr, ei.User)
	if err != nil {
		return err
	}

	// set deleted
	ei._deleted = true

	return nil
}

// EquippedItemByUser retrieves a row from 'public.equipped_items' as a EquippedItem.
//
// Generated from index 'equipped_items_pkey'.
func EquippedItemByUser(db XODB, user string) (*EquippedItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"user", "bait", "rod", "hook", "vehicle", "bait_box" ` +
		`FROM public.equipped_items ` +
		`WHERE "user" = $1`

	// run query
	XOLog(sqlstr, user)
	ei := EquippedItem{}

	err = db.QueryRow(sqlstr, user).Scan(&ei.User, &ei.Bait, &ei.Rod, &ei.Hook, &ei.Vehicle, &ei.BaitBox)
	if err != nil {
		return &ei, err
	}

	ei._exists = true
	return &ei, nil
}
