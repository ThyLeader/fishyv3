// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Fish represents a row from 'public.fish'.
type Fish struct {
	ID       int       `json:"id"`       // id
	Low      int       `json:"low"`      // low
	High     int       `json:"high"`     // high
	Time     Timeofday `json:"time"`     // time
	Pun      string    `json:"pun"`      // pun
	Image    string    `json:"image"`    // image
	Location Location  `json:"location"` // location
	Tier     int       `json:"tier"`     // tier
	Name     string    `json:"name"`     // name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Fish exists in the database.
func (f *Fish) Exists() bool {
	return f._exists
}

// Deleted provides information if the Fish has been deleted from the database.
func (f *Fish) Deleted() bool {
	return f._deleted
}

// Insert inserts the Fish to the database.
func (f *Fish) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.fish (` +
		`"low", "high", "time", "pun", "image", "location", "tier", "name"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING "id"`

	// run query
	XOLog(sqlstr, f.Low, f.High, f.Time, f.Pun, f.Image, f.Location, f.Tier, f.Name)
	err = db.QueryRow(sqlstr, f.Low, f.High, f.Time, f.Pun, f.Image, f.Location, f.Tier, f.Name).Scan(&f.ID)
	if err != nil {
		return err
	}

	// set existence
	f._exists = true

	return nil
}

// Update updates the Fish in the database.
func (f *Fish) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if f._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.fish SET (` +
		`"low", "high", "time", "pun", "image", "location", "tier", "name"` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE "id" = $9`

	// run query
	XOLog(sqlstr, f.Low, f.High, f.Time, f.Pun, f.Image, f.Location, f.Tier, f.Name, f.ID)
	_, err = db.Exec(sqlstr, f.Low, f.High, f.Time, f.Pun, f.Image, f.Location, f.Tier, f.Name, f.ID)
	return err
}

// Save saves the Fish to the database.
func (f *Fish) Save(db XODB) error {
	if f.Exists() {
		return f.Update(db)
	}

	return f.Insert(db)
}

// Upsert performs an upsert for Fish.
//
// NOTE: PostgreSQL 9.5+ only
func (f *Fish) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.fish (` +
		`"id", "low", "high", "time", "pun", "image", "location", "tier", "name"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT ("id") DO UPDATE SET (` +
		`"id", "low", "high", "time", "pun", "image", "location", "tier", "name"` +
		`) = (` +
		`EXCLUDED."id", EXCLUDED."low", EXCLUDED."high", EXCLUDED."time", EXCLUDED."pun", EXCLUDED."image", EXCLUDED."location", EXCLUDED."tier", EXCLUDED."name"` +
		`)`

	// run query
	XOLog(sqlstr, f.ID, f.Low, f.High, f.Time, f.Pun, f.Image, f.Location, f.Tier, f.Name)
	_, err = db.Exec(sqlstr, f.ID, f.Low, f.High, f.Time, f.Pun, f.Image, f.Location, f.Tier, f.Name)
	if err != nil {
		return err
	}

	// set existence
	f._exists = true

	return nil
}

// Delete deletes the Fish from the database.
func (f *Fish) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return nil
	}

	// if deleted, bail
	if f._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.fish WHERE "id" = $1`

	// run query
	XOLog(sqlstr, f.ID)
	_, err = db.Exec(sqlstr, f.ID)
	if err != nil {
		return err
	}

	// set deleted
	f._deleted = true

	return nil
}

// FishByID retrieves a row from 'public.fish' as a Fish.
//
// Generated from index 'fish_pkey'.
func FishByID(db XODB, id int) (*Fish, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "low", "high", "time", "pun", "image", "location", "tier", "name" ` +
		`FROM public.fish ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	f := Fish{}

	err = db.QueryRow(sqlstr, id).Scan(&f.ID, &f.Low, &f.High, &f.Time, &f.Pun, &f.Image, &f.Location, &f.Tier, &f.Name)
	if err != nil {
		return &f, err
	}

	f._exists = true
	return &f, nil
}
