// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Garbage represents a row from 'public.garbage'.
type Garbage struct {
	ID   int    `json:"id"`   // id
	Text string `json:"text"` // text
	User string `json:"user"` // user

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Garbage exists in the database.
func (g *Garbage) Exists() bool {
	return g._exists
}

// Deleted provides information if the Garbage has been deleted from the database.
func (g *Garbage) Deleted() bool {
	return g._deleted
}

// Insert inserts the Garbage to the database.
func (g *Garbage) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.garbage (` +
		`"text", "user"` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING "id"`

	// run query
	XOLog(sqlstr, g.Text, g.User)
	err = db.QueryRow(sqlstr, g.Text, g.User).Scan(&g.ID)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Garbage in the database.
func (g *Garbage) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.garbage SET (` +
		`"text", "user"` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE "id" = $3`

	// run query
	XOLog(sqlstr, g.Text, g.User, g.ID)
	_, err = db.Exec(sqlstr, g.Text, g.User, g.ID)
	return err
}

// Save saves the Garbage to the database.
func (g *Garbage) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Garbage.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Garbage) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.garbage (` +
		`"id", "text", "user"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT ("id") DO UPDATE SET (` +
		`"id", "text", "user"` +
		`) = (` +
		`EXCLUDED."id", EXCLUDED."text", EXCLUDED."user"` +
		`)`

	// run query
	XOLog(sqlstr, g.ID, g.Text, g.User)
	_, err = db.Exec(sqlstr, g.ID, g.Text, g.User)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Garbage from the database.
func (g *Garbage) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.garbage WHERE "id" = $1`

	// run query
	XOLog(sqlstr, g.ID)
	_, err = db.Exec(sqlstr, g.ID)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GarbageByID retrieves a row from 'public.garbage' as a Garbage.
//
// Generated from index 'garbage_pkey'.
func GarbageByID(db XODB, id int) (*Garbage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "text", "user" ` +
		`FROM public.garbage ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	g := Garbage{}

	err = db.QueryRow(sqlstr, id).Scan(&g.ID, &g.Text, &g.User)
	if err != nil {
		return &g, err
	}

	g._exists = true
	return &g, nil
}
