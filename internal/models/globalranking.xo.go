// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// GlobalRanking represents a row from 'public.global_rankings'.
type GlobalRanking struct {
	User      string  `json:"user"`       // user
	Score     int     `json:"score"`      // score
	Garbage   int     `json:"garbage"`    // garbage
	Fish      int     `json:"fish"`       // fish
	AvgLength float64 `json:"avg_length"` // avg_length
	Casts     int     `json:"casts"`      // casts

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GlobalRanking exists in the database.
func (gr *GlobalRanking) Exists() bool {
	return gr._exists
}

// Deleted provides information if the GlobalRanking has been deleted from the database.
func (gr *GlobalRanking) Deleted() bool {
	return gr._deleted
}

// Insert inserts the GlobalRanking to the database.
func (gr *GlobalRanking) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if gr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.global_rankings (` +
		`score, garbage, fish, avg_length, casts` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING user`

	// run query
	XOLog(sqlstr, gr.Score, gr.Garbage, gr.Fish, gr.AvgLength, gr.Casts)
	err = db.QueryRow(sqlstr, gr.Score, gr.Garbage, gr.Fish, gr.AvgLength, gr.Casts).Scan(&gr.User)
	if err != nil {
		return err
	}

	// set existence
	gr._exists = true

	return nil
}

// Update updates the GlobalRanking in the database.
func (gr *GlobalRanking) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if gr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.global_rankings SET (` +
		`score, garbage, fish, avg_length, casts` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE user = $6`

	// run query
	XOLog(sqlstr, gr.Score, gr.Garbage, gr.Fish, gr.AvgLength, gr.Casts, gr.User)
	_, err = db.Exec(sqlstr, gr.Score, gr.Garbage, gr.Fish, gr.AvgLength, gr.Casts, gr.User)
	return err
}

// Save saves the GlobalRanking to the database.
func (gr *GlobalRanking) Save(db XODB) error {
	if gr.Exists() {
		return gr.Update(db)
	}

	return gr.Insert(db)
}

// Upsert performs an upsert for GlobalRanking.
//
// NOTE: PostgreSQL 9.5+ only
func (gr *GlobalRanking) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if gr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.global_rankings (` +
		`user, score, garbage, fish, avg_length, casts` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (user) DO UPDATE SET (` +
		`user, score, garbage, fish, avg_length, casts` +
		`) = (` +
		`EXCLUDED.user, EXCLUDED.score, EXCLUDED.garbage, EXCLUDED.fish, EXCLUDED.avg_length, EXCLUDED.casts` +
		`)`

	// run query
	XOLog(sqlstr, gr.User, gr.Score, gr.Garbage, gr.Fish, gr.AvgLength, gr.Casts)
	_, err = db.Exec(sqlstr, gr.User, gr.Score, gr.Garbage, gr.Fish, gr.AvgLength, gr.Casts)
	if err != nil {
		return err
	}

	// set existence
	gr._exists = true

	return nil
}

// Delete deletes the GlobalRanking from the database.
func (gr *GlobalRanking) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gr._exists {
		return nil
	}

	// if deleted, bail
	if gr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.global_rankings WHERE user = $1`

	// run query
	XOLog(sqlstr, gr.User)
	_, err = db.Exec(sqlstr, gr.User)
	if err != nil {
		return err
	}

	// set deleted
	gr._deleted = true

	return nil
}

// GlobalRankingByUser retrieves a row from 'public.global_rankings' as a GlobalRanking.
//
// Generated from index 'global_rankings_pkey'.
func GlobalRankingByUser(db XODB, user string) (*GlobalRanking, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user, score, garbage, fish, avg_length, casts ` +
		`FROM public.global_rankings ` +
		`WHERE user = $1`

	// run query
	XOLog(sqlstr, user)
	gr := GlobalRanking{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, user).Scan(&gr.User, &gr.Score, &gr.Garbage, &gr.Fish, &gr.AvgLength, &gr.Casts)
	if err != nil {
		return nil, err
	}

	return &gr, nil
}

// GlobalRankingsByUserScore retrieves a row from 'public.global_rankings' as a GlobalRanking.
//
// Generated from index 'user_score'.
func GlobalRankingsByUserScore(db XODB, user string, score int) ([]*GlobalRanking, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user, score, garbage, fish, avg_length, casts ` +
		`FROM public.global_rankings ` +
		`WHERE user = $1 AND score = $2`

	// run query
	XOLog(sqlstr, user, score)
	q, err := db.Query(sqlstr, user, score)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*GlobalRanking{}
	for q.Next() {
		gr := GlobalRanking{
			_exists: true,
		}

		// scan
		err = q.Scan(&gr.User, &gr.Score, &gr.Garbage, &gr.Fish, &gr.AvgLength, &gr.Casts)
		if err != nil {
			return nil, err
		}

		res = append(res, &gr)
	}

	return res, nil
}
