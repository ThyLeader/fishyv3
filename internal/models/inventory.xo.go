// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Inventory represents a row from 'public.inventory'.
type Inventory struct {
	User      string `json:"user"`      // user
	Fish      int    `json:"fish"`      // fish
	Garbage   int    `json:"garbage"`   // garbage
	Legendary int    `json:"legendary"` // legendary
	Worth     int    `json:"worth"`     // worth

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Inventory exists in the database.
func (i *Inventory) Exists() bool {
	return i._exists
}

// Deleted provides information if the Inventory has been deleted from the database.
func (i *Inventory) Deleted() bool {
	return i._deleted
}

// Insert inserts the Inventory to the database.
func (i *Inventory) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.inventory (` +
		`"fish", "garbage", "legendary", "worth"` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING "user"`

	// run query
	XOLog(sqlstr, i.Fish, i.Garbage, i.Legendary, i.Worth)
	err = db.QueryRow(sqlstr, i.Fish, i.Garbage, i.Legendary, i.Worth).Scan(&i.User)
	if err != nil {
		return err
	}

	// set existence
	i._exists = true

	return nil
}

// Update updates the Inventory in the database.
func (i *Inventory) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if i._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.inventory SET (` +
		`"fish", "garbage", "legendary", "worth"` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE "user" = $5`

	// run query
	XOLog(sqlstr, i.Fish, i.Garbage, i.Legendary, i.Worth, i.User)
	_, err = db.Exec(sqlstr, i.Fish, i.Garbage, i.Legendary, i.Worth, i.User)
	return err
}

// Save saves the Inventory to the database.
func (i *Inventory) Save(db XODB) error {
	if i.Exists() {
		return i.Update(db)
	}

	return i.Insert(db)
}

// Upsert performs an upsert for Inventory.
//
// NOTE: PostgreSQL 9.5+ only
func (i *Inventory) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.inventory (` +
		`"user", "fish", "garbage", "legendary", "worth"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT ("user") DO UPDATE SET (` +
		`"user", "fish", "garbage", "legendary", "worth"` +
		`) = (` +
		`EXCLUDED."user", EXCLUDED."fish", EXCLUDED."garbage", EXCLUDED."legendary", EXCLUDED."worth"` +
		`)`

	// run query
	XOLog(sqlstr, i.User, i.Fish, i.Garbage, i.Legendary, i.Worth)
	_, err = db.Exec(sqlstr, i.User, i.Fish, i.Garbage, i.Legendary, i.Worth)
	if err != nil {
		return err
	}

	// set existence
	i._exists = true

	return nil
}

// Delete deletes the Inventory from the database.
func (i *Inventory) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return nil
	}

	// if deleted, bail
	if i._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.inventory WHERE "user" = $1`

	// run query
	XOLog(sqlstr, i.User)
	_, err = db.Exec(sqlstr, i.User)
	if err != nil {
		return err
	}

	// set deleted
	i._deleted = true

	return nil
}

// InventoryByUser retrieves a row from 'public.inventory' as a Inventory.
//
// Generated from index 'bait_inventory_pkey'.
func InventoryByUser(db XODB, user string) (*Inventory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"user", "fish", "garbage", "legendary", "worth" ` +
		`FROM public.inventory ` +
		`WHERE "user" = $1`

	// run query
	XOLog(sqlstr, user)
	i := Inventory{}

	err = db.QueryRow(sqlstr, user).Scan(&i.User, &i.Fish, &i.Garbage, &i.Legendary, &i.Worth)
	if err != nil {
		return &i, err
	}

	i._exists = true
	return &i, nil
}
