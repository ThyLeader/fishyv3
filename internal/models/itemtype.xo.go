// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// Itemtype is the 'itemtype' enum type from schema 'public'.
type Itemtype uint16

const (
	// ItemtypeBait is the 'bait' Itemtype.
	ItemtypeBait = Itemtype(1)

	// ItemtypeRod is the 'rod' Itemtype.
	ItemtypeRod = Itemtype(2)

	// ItemtypeHook is the 'hook' Itemtype.
	ItemtypeHook = Itemtype(3)

	// ItemtypeVehicle is the 'vehicle' Itemtype.
	ItemtypeVehicle = Itemtype(4)

	// ItemtypeBaitBox is the 'bait_box' Itemtype.
	ItemtypeBaitBox = Itemtype(5)
)

// String returns the string value of the Itemtype.
func (i Itemtype) String() string {
	var enumVal string

	switch i {
	case ItemtypeBait:
		enumVal = "bait"

	case ItemtypeRod:
		enumVal = "rod"

	case ItemtypeHook:
		enumVal = "hook"

	case ItemtypeVehicle:
		enumVal = "vehicle"

	case ItemtypeBaitBox:
		enumVal = "bait_box"
	}

	return enumVal
}

// MarshalText marshals Itemtype into text.
func (i Itemtype) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText unmarshals Itemtype from text.
func (i *Itemtype) UnmarshalText(text []byte) error {
	switch string(text) {
	case "bait":
		*i = ItemtypeBait

	case "rod":
		*i = ItemtypeRod

	case "hook":
		*i = ItemtypeHook

	case "vehicle":
		*i = ItemtypeVehicle

	case "bait_box":
		*i = ItemtypeBaitBox

	default:
		return errors.New("invalid Itemtype")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Itemtype.
func (i Itemtype) Value() (driver.Value, error) {
	return i.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Itemtype.
func (i *Itemtype) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Itemtype")
	}

	return i.UnmarshalText(buf)
}
