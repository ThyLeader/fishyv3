// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// LocationDensity represents a row from 'public.location_density'.
type LocationDensity struct {
	User     string   `json:"user"`     // user
	Lake     int      `json:"lake"`     // lake
	River    int      `json:"river"`    // river
	Ocean    int      `json:"ocean"`    // ocean
	Location Location `json:"location"` // location

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the LocationDensity exists in the database.
func (ld *LocationDensity) Exists() bool {
	return ld._exists
}

// Deleted provides information if the LocationDensity has been deleted from the database.
func (ld *LocationDensity) Deleted() bool {
	return ld._deleted
}

// Insert inserts the LocationDensity to the database.
func (ld *LocationDensity) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ld._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.location_density (` +
		`"user", "lake", "river", "ocean", "location"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING "user"`

	// run query
	XOLog(sqlstr, ld.User, ld.Lake, ld.River, ld.Ocean, ld.Location)
	err = db.QueryRow(sqlstr, ld.User, ld.Lake, ld.River, ld.Ocean, ld.Location).Scan(&ld.User)
	if err != nil {
		return err
	}

	// set existence
	ld._exists = true

	return nil
}

// Update updates the LocationDensity in the database.
func (ld *LocationDensity) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ld._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ld._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.location_density SET (` +
		`"lake", "river", "ocean", "location"` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE "user" = $5`

	// run query
	XOLog(sqlstr, ld.Lake, ld.River, ld.Ocean, ld.Location, ld.User)
	_, err = db.Exec(sqlstr, ld.Lake, ld.River, ld.Ocean, ld.Location, ld.User)
	return err
}

// Save saves the LocationDensity to the database.
func (ld *LocationDensity) Save(db XODB) error {
	if ld.Exists() {
		return ld.Update(db)
	}

	return ld.Insert(db)
}

// Upsert performs an upsert for LocationDensity.
//
// NOTE: PostgreSQL 9.5+ only
func (ld *LocationDensity) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ld._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.location_density (` +
		`"user", "lake", "river", "ocean", "location"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT ("user") DO UPDATE SET (` +
		`"user", "lake", "river", "ocean", "location"` +
		`) = (` +
		`EXCLUDED."user", EXCLUDED."lake", EXCLUDED."river", EXCLUDED."ocean", EXCLUDED."location"` +
		`)`

	// run query
	XOLog(sqlstr, ld.User, ld.Lake, ld.River, ld.Ocean, ld.Location)
	_, err = db.Exec(sqlstr, ld.User, ld.Lake, ld.River, ld.Ocean, ld.Location)
	if err != nil {
		return err
	}

	// set existence
	ld._exists = true

	return nil
}

// Delete deletes the LocationDensity from the database.
func (ld *LocationDensity) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ld._exists {
		return nil
	}

	// if deleted, bail
	if ld._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.location_density WHERE "user" = $1`

	// run query
	XOLog(sqlstr, ld.User)
	_, err = db.Exec(sqlstr, ld.User)
	if err != nil {
		return err
	}

	// set deleted
	ld._deleted = true

	return nil
}

// LocationDensityByUser retrieves a row from 'public.location_density' as a LocationDensity.
//
// Generated from index 'location_density_pkey'.
func LocationDensityByUser(db XODB, user string) (*LocationDensity, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"user", "lake", "river", "ocean", "location" ` +
		`FROM public.location_density ` +
		`WHERE "user" = $1`

	// run query
	XOLog(sqlstr, user)
	ld := LocationDensity{}

	err = db.QueryRow(sqlstr, user).Scan(&ld.User, &ld.Lake, &ld.River, &ld.Ocean, &ld.Location)
	if err != nil {
		return &ld, err
	}

	ld._exists = true
	return &ld, nil
}
