// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// OwnedItem represents a row from 'public.owned_items'.
type OwnedItem struct {
	User string `json:"user"` // user
	Item Item   `json:"item"` // item
	Tier int    `json:"tier"` // tier

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OwnedItem exists in the database.
func (oi *OwnedItem) Exists() bool {
	return oi._exists
}

// Deleted provides information if the OwnedItem has been deleted from the database.
func (oi *OwnedItem) Deleted() bool {
	return oi._deleted
}

// Insert inserts the OwnedItem to the database.
func (oi *OwnedItem) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if oi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.owned_items (` +
		`"user", "item", "tier"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, oi.User, oi.Item, oi.Tier)
	err = db.QueryRow(sqlstr, oi.User, oi.Item, oi.Tier).Scan(&oi.User)
	if err != nil {
		return err
	}

	// set existence
	oi._exists = true

	return nil
}

// Update updates the OwnedItem in the database.
func (oi *OwnedItem) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !oi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if oi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.owned_items SET (` +
		`"item", "tier"` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE "user" = $3`

	// run query
	XOLog(sqlstr, oi.Item, oi.Tier, oi.User)
	_, err = db.Exec(sqlstr, oi.Item, oi.Tier, oi.User)
	return err
}

// Save saves the OwnedItem to the database.
func (oi *OwnedItem) Save(db XODB) error {
	if oi.Exists() {
		return oi.Update(db)
	}

	return oi.Insert(db)
}

// Upsert performs an upsert for OwnedItem.
//
// NOTE: PostgreSQL 9.5+ only
func (oi *OwnedItem) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if oi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.owned_items (` +
		`"user", "item", "tier"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT ("user") DO UPDATE SET (` +
		`"user", "item", "tier"` +
		`) = (` +
		`EXCLUDED."user", EXCLUDED."item", EXCLUDED."tier"` +
		`)`

	// run query
	XOLog(sqlstr, oi.User, oi.Item, oi.Tier)
	_, err = db.Exec(sqlstr, oi.User, oi.Item, oi.Tier)
	if err != nil {
		return err
	}

	// set existence
	oi._exists = true

	return nil
}

// Delete deletes the OwnedItem from the database.
func (oi *OwnedItem) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !oi._exists {
		return nil
	}

	// if deleted, bail
	if oi._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.owned_items WHERE "user" = $1`

	// run query
	XOLog(sqlstr, oi.User)
	_, err = db.Exec(sqlstr, oi.User)
	if err != nil {
		return err
	}

	// set deleted
	oi._deleted = true

	return nil
}

// OwnedItemByUser retrieves a row from 'public.owned_items' as a OwnedItem.
//
// Generated from index 'owned_items_pkey'.
func OwnedItemByUser(db XODB, user string) (*OwnedItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"user", "item", "tier" ` +
		`FROM public.owned_items ` +
		`WHERE "user" = $1`

	// run query
	XOLog(sqlstr, user)
	oi := OwnedItem{}

	err = db.QueryRow(sqlstr, user).Scan(&oi.User, &oi.Item, &oi.Tier)
	if err != nil {
		return &oi, err
	}

	oi._exists = true
	return &oi, nil
}

// OwnedItemsByUser retrieves a row from 'public.owned_items' as a OwnedItem.
//
// Generated from index 'user_index'.
func OwnedItemsByUser(db XODB, user string) ([]*OwnedItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"user", "item", "tier" ` +
		`FROM public.owned_items ` +
		`WHERE "user" = $1`

	// run query
	XOLog(sqlstr, user)
	q, err := db.Query(sqlstr, user)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*OwnedItem{}
	for q.Next() {
		oi := OwnedItem{
			_exists: true,
		}

		// scan
		err = q.Scan(&oi.User, &oi.Item, &oi.Tier)
		if err != nil {
			return nil, err
		}

		res = append(res, &oi)
	}

	return res, nil
}

// OwnedItemsByUserItem retrieves a row from 'public.owned_items' as a OwnedItem.
//
// Generated from index 'user_item'.
func OwnedItemsByUserItem(db XODB, user string, item Item) ([]*OwnedItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"user", "item", "tier" ` +
		`FROM public.owned_items ` +
		`WHERE "user" = $1 AND "item" = $2`

	// run query
	XOLog(sqlstr, user, item)
	q, err := db.Query(sqlstr, user, item)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*OwnedItem{}
	for q.Next() {
		oi := OwnedItem{
			_exists: true,
		}

		// scan
		err = q.Scan(&oi.User, &oi.Item, &oi.Tier)
		if err != nil {
			return nil, err
		}

		res = append(res, &oi)
	}

	return res, nil
}

// OwnedItemByUserItemTier retrieves a row from 'public.owned_items' as a OwnedItem.
//
// Generated from index 'user_item_tier'.
func OwnedItemByUserItemTier(db XODB, user string, item Item, tier int) (*OwnedItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"user", "item", "tier" ` +
		`FROM public.owned_items ` +
		`WHERE "user" = $1 AND "item" = $2 AND "tier" = $3`

	// run query
	XOLog(sqlstr, user, item, tier)
	oi := OwnedItem{}

	err = db.QueryRow(sqlstr, user, item, tier).Scan(&oi.User, &oi.Item, &oi.Tier)
	if err != nil {
		return &oi, err
	}

	oi._exists = true
	return &oi, nil
}
