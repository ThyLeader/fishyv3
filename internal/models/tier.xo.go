// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Tier represents a row from 'public.tiers'.
type Tier struct {
	Tier     int `json:"tier"`     // tier
	Required int `json:"required"` // required

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Tier exists in the database.
func (t *Tier) Exists() bool {
	return t._exists
}

// Deleted provides information if the Tier has been deleted from the database.
func (t *Tier) Deleted() bool {
	return t._deleted
}

// Insert inserts the Tier to the database.
func (t *Tier) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.tiers (` +
		`"tier", "required"` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING "tier"`

	// run query
	XOLog(sqlstr, t.Tier, t.Required)
	err = db.QueryRow(sqlstr, t.Tier, t.Required).Scan(&t.Tier)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Update updates the Tier in the database.
func (t *Tier) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.tiers SET (` +
		`"required"` +
		`) = ( ` +
		`$1` +
		`) WHERE "tier" = $2`

	// run query
	XOLog(sqlstr, t.Required, t.Tier)
	_, err = db.Exec(sqlstr, t.Required, t.Tier)
	return err
}

// Save saves the Tier to the database.
func (t *Tier) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Insert(db)
}

// Upsert performs an upsert for Tier.
//
// NOTE: PostgreSQL 9.5+ only
func (t *Tier) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.tiers (` +
		`"tier", "required"` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT ("tier") DO UPDATE SET (` +
		`"tier", "required"` +
		`) = (` +
		`EXCLUDED."tier", EXCLUDED."required"` +
		`)`

	// run query
	XOLog(sqlstr, t.Tier, t.Required)
	_, err = db.Exec(sqlstr, t.Tier, t.Required)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Delete deletes the Tier from the database.
func (t *Tier) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.tiers WHERE "tier" = $1`

	// run query
	XOLog(sqlstr, t.Tier)
	_, err = db.Exec(sqlstr, t.Tier)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

// TierByTier retrieves a row from 'public.tiers' as a Tier.
//
// Generated from index 'tiers_pkey'.
func TierByTier(db XODB, tier int) (*Tier, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"tier", "required" ` +
		`FROM public.tiers ` +
		`WHERE "tier" = $1`

	// run query
	XOLog(sqlstr, tier)
	t := Tier{}

	err = db.QueryRow(sqlstr, tier).Scan(&t.Tier, &t.Required)
	if err != nil {
		return &t, err
	}

	t._exists = true
	return &t, nil
}
