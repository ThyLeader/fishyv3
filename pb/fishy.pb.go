// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fishy.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	fishy.proto
	lmao.proto

It has these top-level messages:
	InventoryRequest
	InventoryResponse
	GetLocationRequest
	GetLocationResponse
	SetLocationRequest
	SetLocationResponse
	BuyItemRequest
	BuyItemResponse
	BlacklistRequest
	BlacklistResponse
	UnblacklistRequest
	UnblacklistResponse
	StartGatherBaitRequest
	StartGatherBaitResponse
	CheckGatherBaitRequest
	CheckGatherBaitResponse
	LeaderboardRequest
	LeaderboardResponse
	LeaderboardUser
	GetBaitInventoryRequest
	GetBaitInventoryResponse
	BuyBaitRequest
	BuyBaitResponse
	GetBaitTierRequest
	GetBaitTierResponse
	SetBaitTierRequest
	SetBaitTierResponse
	SellFishRequest
	SellFishResponse
	CheckTimeRequest
	CheckTimeResponse
	FishRequest
	FishResponse
	UserItem
	UserItems
	FishInventory
	BaitInventory
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FishCategory int32

const (
	FishCategory_FISH      FishCategory = 0
	FishCategory_LEGENDARY FishCategory = 1
	FishCategory_GARBAGE   FishCategory = 2
	FishCategory_ALL       FishCategory = 3
)

var FishCategory_name = map[int32]string{
	0: "FISH",
	1: "LEGENDARY",
	2: "GARBAGE",
	3: "ALL",
}
var FishCategory_value = map[string]int32{
	"FISH":      0,
	"LEGENDARY": 1,
	"GARBAGE":   2,
	"ALL":       3,
}

func (x FishCategory) String() string {
	return proto.EnumName(FishCategory_name, int32(x))
}
func (FishCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Item int32

const (
	Item_BAIT    Item = 0
	Item_ROD     Item = 1
	Item_HOOK    Item = 2
	Item_VEHICLE Item = 3
	Item_BAITBOX Item = 4
)

var Item_name = map[int32]string{
	0: "BAIT",
	1: "ROD",
	2: "HOOK",
	3: "VEHICLE",
	4: "BAITBOX",
}
var Item_value = map[string]int32{
	"BAIT":    0,
	"ROD":     1,
	"HOOK":    2,
	"VEHICLE": 3,
	"BAITBOX": 4,
}

func (x Item) String() string {
	return proto.EnumName(Item_name, int32(x))
}
func (Item) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Location int32

const (
	Location_LAKE  Location = 0
	Location_RIVER Location = 1
	Location_OCEAN Location = 2
)

var Location_name = map[int32]string{
	0: "LAKE",
	1: "RIVER",
	2: "OCEAN",
}
var Location_value = map[string]int32{
	"LAKE":  0,
	"RIVER": 1,
	"OCEAN": 2,
}

func (x Location) String() string {
	return proto.EnumName(Location_name, int32(x))
}
func (Location) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type BaitTier int32

const (
	BaitTier_T1 BaitTier = 0
	BaitTier_T2 BaitTier = 1
	BaitTier_T3 BaitTier = 2
	BaitTier_T4 BaitTier = 3
	BaitTier_T5 BaitTier = 4
)

var BaitTier_name = map[int32]string{
	0: "T1",
	1: "T2",
	2: "T3",
	3: "T4",
	4: "T5",
}
var BaitTier_value = map[string]int32{
	"T1": 0,
	"T2": 1,
	"T3": 2,
	"T4": 3,
	"T5": 4,
}

func (x BaitTier) String() string {
	return proto.EnumName(BaitTier_name, int32(x))
}
func (BaitTier) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type InventoryRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *InventoryRequest) Reset()                    { *m = InventoryRequest{} }
func (m *InventoryRequest) String() string            { return proto.CompactTextString(m) }
func (*InventoryRequest) ProtoMessage()               {}
func (*InventoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InventoryRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type InventoryResponse struct {
	Items    *UserItems     `protobuf:"bytes,1,opt,name=items" json:"items,omitempty"`
	Fish     *FishInventory `protobuf:"bytes,2,opt,name=fish" json:"fish,omitempty"`
	MaxFish  int32          `protobuf:"varint,3,opt,name=max_fish,json=maxFish" json:"max_fish,omitempty"`
	MaxBait  int32          `protobuf:"varint,4,opt,name=max_bait,json=maxBait" json:"max_bait,omitempty"`
	UserTier int32          `protobuf:"varint,5,opt,name=user_tier,json=userTier" json:"user_tier,omitempty"`
}

func (m *InventoryResponse) Reset()                    { *m = InventoryResponse{} }
func (m *InventoryResponse) String() string            { return proto.CompactTextString(m) }
func (*InventoryResponse) ProtoMessage()               {}
func (*InventoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InventoryResponse) GetItems() *UserItems {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *InventoryResponse) GetFish() *FishInventory {
	if m != nil {
		return m.Fish
	}
	return nil
}

func (m *InventoryResponse) GetMaxFish() int32 {
	if m != nil {
		return m.MaxFish
	}
	return 0
}

func (m *InventoryResponse) GetMaxBait() int32 {
	if m != nil {
		return m.MaxBait
	}
	return 0
}

func (m *InventoryResponse) GetUserTier() int32 {
	if m != nil {
		return m.UserTier
	}
	return 0
}

type GetLocationRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *GetLocationRequest) Reset()                    { *m = GetLocationRequest{} }
func (m *GetLocationRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLocationRequest) ProtoMessage()               {}
func (*GetLocationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetLocationRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type GetLocationResponse struct {
	Location Location `protobuf:"varint,1,opt,name=location,enum=fishyv3.Location" json:"location,omitempty"`
}

func (m *GetLocationResponse) Reset()                    { *m = GetLocationResponse{} }
func (m *GetLocationResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLocationResponse) ProtoMessage()               {}
func (*GetLocationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetLocationResponse) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location_LAKE
}

type SetLocationRequest struct {
	User     string   `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Location Location `protobuf:"varint,2,opt,name=location,enum=fishyv3.Location" json:"location,omitempty"`
}

func (m *SetLocationRequest) Reset()                    { *m = SetLocationRequest{} }
func (m *SetLocationRequest) String() string            { return proto.CompactTextString(m) }
func (*SetLocationRequest) ProtoMessage()               {}
func (*SetLocationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SetLocationRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *SetLocationRequest) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location_LAKE
}

type SetLocationResponse struct {
}

func (m *SetLocationResponse) Reset()                    { *m = SetLocationResponse{} }
func (m *SetLocationResponse) String() string            { return proto.CompactTextString(m) }
func (*SetLocationResponse) ProtoMessage()               {}
func (*SetLocationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type BuyItemRequest struct {
	Item Item  `protobuf:"varint,1,opt,name=item,enum=fishyv3.Item" json:"item,omitempty"`
	Tier int32 `protobuf:"varint,2,opt,name=tier" json:"tier,omitempty"`
}

func (m *BuyItemRequest) Reset()                    { *m = BuyItemRequest{} }
func (m *BuyItemRequest) String() string            { return proto.CompactTextString(m) }
func (*BuyItemRequest) ProtoMessage()               {}
func (*BuyItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BuyItemRequest) GetItem() Item {
	if m != nil {
		return m.Item
	}
	return Item_BAIT
}

func (m *BuyItemRequest) GetTier() int32 {
	if m != nil {
		return m.Tier
	}
	return 0
}

type BuyItemResponse struct {
}

func (m *BuyItemResponse) Reset()                    { *m = BuyItemResponse{} }
func (m *BuyItemResponse) String() string            { return proto.CompactTextString(m) }
func (*BuyItemResponse) ProtoMessage()               {}
func (*BuyItemResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type BlacklistRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *BlacklistRequest) Reset()                    { *m = BlacklistRequest{} }
func (m *BlacklistRequest) String() string            { return proto.CompactTextString(m) }
func (*BlacklistRequest) ProtoMessage()               {}
func (*BlacklistRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BlacklistRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type BlacklistResponse struct {
}

func (m *BlacklistResponse) Reset()                    { *m = BlacklistResponse{} }
func (m *BlacklistResponse) String() string            { return proto.CompactTextString(m) }
func (*BlacklistResponse) ProtoMessage()               {}
func (*BlacklistResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type UnblacklistRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *UnblacklistRequest) Reset()                    { *m = UnblacklistRequest{} }
func (m *UnblacklistRequest) String() string            { return proto.CompactTextString(m) }
func (*UnblacklistRequest) ProtoMessage()               {}
func (*UnblacklistRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UnblacklistRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type UnblacklistResponse struct {
}

func (m *UnblacklistResponse) Reset()                    { *m = UnblacklistResponse{} }
func (m *UnblacklistResponse) String() string            { return proto.CompactTextString(m) }
func (*UnblacklistResponse) ProtoMessage()               {}
func (*UnblacklistResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type StartGatherBaitRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *StartGatherBaitRequest) Reset()                    { *m = StartGatherBaitRequest{} }
func (m *StartGatherBaitRequest) String() string            { return proto.CompactTextString(m) }
func (*StartGatherBaitRequest) ProtoMessage()               {}
func (*StartGatherBaitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *StartGatherBaitRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type StartGatherBaitResponse struct {
}

func (m *StartGatherBaitResponse) Reset()                    { *m = StartGatherBaitResponse{} }
func (m *StartGatherBaitResponse) String() string            { return proto.CompactTextString(m) }
func (*StartGatherBaitResponse) ProtoMessage()               {}
func (*StartGatherBaitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type CheckGatherBaitRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *CheckGatherBaitRequest) Reset()                    { *m = CheckGatherBaitRequest{} }
func (m *CheckGatherBaitRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckGatherBaitRequest) ProtoMessage()               {}
func (*CheckGatherBaitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CheckGatherBaitRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type CheckGatherBaitResponse struct {
}

func (m *CheckGatherBaitResponse) Reset()                    { *m = CheckGatherBaitResponse{} }
func (m *CheckGatherBaitResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckGatherBaitResponse) ProtoMessage()               {}
func (*CheckGatherBaitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type LeaderboardRequest struct {
	Global    bool   `protobuf:"varint,1,opt,name=global" json:"global,omitempty"`
	Page      int32  `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
	User      string `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Guild     string `protobuf:"bytes,4,opt,name=guild" json:"guild,omitempty"`
	GuildName string `protobuf:"bytes,5,opt,name=guild_name,json=guildName" json:"guild_name,omitempty"`
}

func (m *LeaderboardRequest) Reset()                    { *m = LeaderboardRequest{} }
func (m *LeaderboardRequest) String() string            { return proto.CompactTextString(m) }
func (*LeaderboardRequest) ProtoMessage()               {}
func (*LeaderboardRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *LeaderboardRequest) GetGlobal() bool {
	if m != nil {
		return m.Global
	}
	return false
}

func (m *LeaderboardRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *LeaderboardRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *LeaderboardRequest) GetGuild() string {
	if m != nil {
		return m.Guild
	}
	return ""
}

func (m *LeaderboardRequest) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

type LeaderboardResponse struct {
	Users []*LeaderboardUser `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *LeaderboardResponse) Reset()                    { *m = LeaderboardResponse{} }
func (m *LeaderboardResponse) String() string            { return proto.CompactTextString(m) }
func (*LeaderboardResponse) ProtoMessage()               {}
func (*LeaderboardResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *LeaderboardResponse) GetUsers() []*LeaderboardUser {
	if m != nil {
		return m.Users
	}
	return nil
}

type LeaderboardUser struct {
	User  string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Score int32  `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
}

func (m *LeaderboardUser) Reset()                    { *m = LeaderboardUser{} }
func (m *LeaderboardUser) String() string            { return proto.CompactTextString(m) }
func (*LeaderboardUser) ProtoMessage()               {}
func (*LeaderboardUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *LeaderboardUser) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *LeaderboardUser) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type GetBaitInventoryRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *GetBaitInventoryRequest) Reset()                    { *m = GetBaitInventoryRequest{} }
func (m *GetBaitInventoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBaitInventoryRequest) ProtoMessage()               {}
func (*GetBaitInventoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetBaitInventoryRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type GetBaitInventoryResponse struct {
	MaxBait      int32          `protobuf:"varint,1,opt,name=max_bait,json=maxBait" json:"max_bait,omitempty"`
	CurrentCount int32          `protobuf:"varint,2,opt,name=current_count,json=currentCount" json:"current_count,omitempty"`
	Bait         *BaitInventory `protobuf:"bytes,3,opt,name=bait" json:"bait,omitempty"`
	CurrentTier  int32          `protobuf:"varint,4,opt,name=current_tier,json=currentTier" json:"current_tier,omitempty"`
	BaitboxTier  int32          `protobuf:"varint,5,opt,name=baitbox_tier,json=baitboxTier" json:"baitbox_tier,omitempty"`
}

func (m *GetBaitInventoryResponse) Reset()                    { *m = GetBaitInventoryResponse{} }
func (m *GetBaitInventoryResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBaitInventoryResponse) ProtoMessage()               {}
func (*GetBaitInventoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetBaitInventoryResponse) GetMaxBait() int32 {
	if m != nil {
		return m.MaxBait
	}
	return 0
}

func (m *GetBaitInventoryResponse) GetCurrentCount() int32 {
	if m != nil {
		return m.CurrentCount
	}
	return 0
}

func (m *GetBaitInventoryResponse) GetBait() *BaitInventory {
	if m != nil {
		return m.Bait
	}
	return nil
}

func (m *GetBaitInventoryResponse) GetCurrentTier() int32 {
	if m != nil {
		return m.CurrentTier
	}
	return 0
}

func (m *GetBaitInventoryResponse) GetBaitboxTier() int32 {
	if m != nil {
		return m.BaitboxTier
	}
	return 0
}

type BuyBaitRequest struct {
	User   string   `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Tier   BaitTier `protobuf:"varint,2,opt,name=tier,enum=fishyv3.BaitTier" json:"tier,omitempty"`
	Amount int32    `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
}

func (m *BuyBaitRequest) Reset()                    { *m = BuyBaitRequest{} }
func (m *BuyBaitRequest) String() string            { return proto.CompactTextString(m) }
func (*BuyBaitRequest) ProtoMessage()               {}
func (*BuyBaitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *BuyBaitRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *BuyBaitRequest) GetTier() BaitTier {
	if m != nil {
		return m.Tier
	}
	return BaitTier_T1
}

func (m *BuyBaitRequest) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type BuyBaitResponse struct {
	New int32 `protobuf:"varint,1,opt,name=new" json:"new,omitempty"`
}

func (m *BuyBaitResponse) Reset()                    { *m = BuyBaitResponse{} }
func (m *BuyBaitResponse) String() string            { return proto.CompactTextString(m) }
func (*BuyBaitResponse) ProtoMessage()               {}
func (*BuyBaitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *BuyBaitResponse) GetNew() int32 {
	if m != nil {
		return m.New
	}
	return 0
}

type GetBaitTierRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *GetBaitTierRequest) Reset()                    { *m = GetBaitTierRequest{} }
func (m *GetBaitTierRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBaitTierRequest) ProtoMessage()               {}
func (*GetBaitTierRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetBaitTierRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type GetBaitTierResponse struct {
	Tier BaitTier `protobuf:"varint,1,opt,name=tier,enum=fishyv3.BaitTier" json:"tier,omitempty"`
}

func (m *GetBaitTierResponse) Reset()                    { *m = GetBaitTierResponse{} }
func (m *GetBaitTierResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBaitTierResponse) ProtoMessage()               {}
func (*GetBaitTierResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetBaitTierResponse) GetTier() BaitTier {
	if m != nil {
		return m.Tier
	}
	return BaitTier_T1
}

type SetBaitTierRequest struct {
	User string   `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Tier BaitTier `protobuf:"varint,2,opt,name=tier,enum=fishyv3.BaitTier" json:"tier,omitempty"`
}

func (m *SetBaitTierRequest) Reset()                    { *m = SetBaitTierRequest{} }
func (m *SetBaitTierRequest) String() string            { return proto.CompactTextString(m) }
func (*SetBaitTierRequest) ProtoMessage()               {}
func (*SetBaitTierRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *SetBaitTierRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *SetBaitTierRequest) GetTier() BaitTier {
	if m != nil {
		return m.Tier
	}
	return BaitTier_T1
}

type SetBaitTierResponse struct {
}

func (m *SetBaitTierResponse) Reset()                    { *m = SetBaitTierResponse{} }
func (m *SetBaitTierResponse) String() string            { return proto.CompactTextString(m) }
func (*SetBaitTierResponse) ProtoMessage()               {}
func (*SetBaitTierResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type SellFishRequest struct {
	User string       `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Type FishCategory `protobuf:"varint,2,opt,name=type,enum=fishyv3.FishCategory" json:"type,omitempty"`
}

func (m *SellFishRequest) Reset()                    { *m = SellFishRequest{} }
func (m *SellFishRequest) String() string            { return proto.CompactTextString(m) }
func (*SellFishRequest) ProtoMessage()               {}
func (*SellFishRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *SellFishRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *SellFishRequest) GetType() FishCategory {
	if m != nil {
		return m.Type
	}
	return FishCategory_FISH
}

type SellFishResponse struct {
	Worth int32 `protobuf:"varint,1,opt,name=worth" json:"worth,omitempty"`
}

func (m *SellFishResponse) Reset()                    { *m = SellFishResponse{} }
func (m *SellFishResponse) String() string            { return proto.CompactTextString(m) }
func (*SellFishResponse) ProtoMessage()               {}
func (*SellFishResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *SellFishResponse) GetWorth() int32 {
	if m != nil {
		return m.Worth
	}
	return 0
}

type CheckTimeRequest struct {
}

func (m *CheckTimeRequest) Reset()                    { *m = CheckTimeRequest{} }
func (m *CheckTimeRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckTimeRequest) ProtoMessage()               {}
func (*CheckTimeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

type CheckTimeResponse struct {
	Time    string `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Morning bool   `protobuf:"varint,2,opt,name=morning" json:"morning,omitempty"`
	Night   bool   `protobuf:"varint,3,opt,name=night" json:"night,omitempty"`
}

func (m *CheckTimeResponse) Reset()                    { *m = CheckTimeResponse{} }
func (m *CheckTimeResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckTimeResponse) ProtoMessage()               {}
func (*CheckTimeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *CheckTimeResponse) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *CheckTimeResponse) GetMorning() bool {
	if m != nil {
		return m.Morning
	}
	return false
}

func (m *CheckTimeResponse) GetNight() bool {
	if m != nil {
		return m.Night
	}
	return false
}

func init() {
	proto.RegisterType((*InventoryRequest)(nil), "fishyv3.InventoryRequest")
	proto.RegisterType((*InventoryResponse)(nil), "fishyv3.InventoryResponse")
	proto.RegisterType((*GetLocationRequest)(nil), "fishyv3.GetLocationRequest")
	proto.RegisterType((*GetLocationResponse)(nil), "fishyv3.GetLocationResponse")
	proto.RegisterType((*SetLocationRequest)(nil), "fishyv3.SetLocationRequest")
	proto.RegisterType((*SetLocationResponse)(nil), "fishyv3.SetLocationResponse")
	proto.RegisterType((*BuyItemRequest)(nil), "fishyv3.BuyItemRequest")
	proto.RegisterType((*BuyItemResponse)(nil), "fishyv3.BuyItemResponse")
	proto.RegisterType((*BlacklistRequest)(nil), "fishyv3.BlacklistRequest")
	proto.RegisterType((*BlacklistResponse)(nil), "fishyv3.BlacklistResponse")
	proto.RegisterType((*UnblacklistRequest)(nil), "fishyv3.UnblacklistRequest")
	proto.RegisterType((*UnblacklistResponse)(nil), "fishyv3.UnblacklistResponse")
	proto.RegisterType((*StartGatherBaitRequest)(nil), "fishyv3.StartGatherBaitRequest")
	proto.RegisterType((*StartGatherBaitResponse)(nil), "fishyv3.StartGatherBaitResponse")
	proto.RegisterType((*CheckGatherBaitRequest)(nil), "fishyv3.CheckGatherBaitRequest")
	proto.RegisterType((*CheckGatherBaitResponse)(nil), "fishyv3.CheckGatherBaitResponse")
	proto.RegisterType((*LeaderboardRequest)(nil), "fishyv3.LeaderboardRequest")
	proto.RegisterType((*LeaderboardResponse)(nil), "fishyv3.LeaderboardResponse")
	proto.RegisterType((*LeaderboardUser)(nil), "fishyv3.LeaderboardUser")
	proto.RegisterType((*GetBaitInventoryRequest)(nil), "fishyv3.GetBaitInventoryRequest")
	proto.RegisterType((*GetBaitInventoryResponse)(nil), "fishyv3.GetBaitInventoryResponse")
	proto.RegisterType((*BuyBaitRequest)(nil), "fishyv3.BuyBaitRequest")
	proto.RegisterType((*BuyBaitResponse)(nil), "fishyv3.BuyBaitResponse")
	proto.RegisterType((*GetBaitTierRequest)(nil), "fishyv3.GetBaitTierRequest")
	proto.RegisterType((*GetBaitTierResponse)(nil), "fishyv3.GetBaitTierResponse")
	proto.RegisterType((*SetBaitTierRequest)(nil), "fishyv3.SetBaitTierRequest")
	proto.RegisterType((*SetBaitTierResponse)(nil), "fishyv3.SetBaitTierResponse")
	proto.RegisterType((*SellFishRequest)(nil), "fishyv3.SellFishRequest")
	proto.RegisterType((*SellFishResponse)(nil), "fishyv3.SellFishResponse")
	proto.RegisterType((*CheckTimeRequest)(nil), "fishyv3.CheckTimeRequest")
	proto.RegisterType((*CheckTimeResponse)(nil), "fishyv3.CheckTimeResponse")
	proto.RegisterEnum("fishyv3.FishCategory", FishCategory_name, FishCategory_value)
	proto.RegisterEnum("fishyv3.Item", Item_name, Item_value)
	proto.RegisterEnum("fishyv3.Location", Location_name, Location_value)
	proto.RegisterEnum("fishyv3.BaitTier", BaitTier_name, BaitTier_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Fishy service

type FishyClient interface {
	Fishy(ctx context.Context, in *FishRequest, opts ...grpc.CallOption) (*FishResponse, error)
	Inventory(ctx context.Context, in *InventoryRequest, opts ...grpc.CallOption) (*InventoryResponse, error)
	GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error)
	SetLocation(ctx context.Context, in *SetLocationRequest, opts ...grpc.CallOption) (*SetLocationResponse, error)
	BuyItem(ctx context.Context, in *BuyItemRequest, opts ...grpc.CallOption) (*BuyItemResponse, error)
	Blacklist(ctx context.Context, in *BlacklistRequest, opts ...grpc.CallOption) (*BlacklistResponse, error)
	Unblacklist(ctx context.Context, in *UnblacklistRequest, opts ...grpc.CallOption) (*UnblacklistResponse, error)
	StartGatherBait(ctx context.Context, in *StartGatherBaitRequest, opts ...grpc.CallOption) (*StartGatherBaitResponse, error)
	CheckGatherBait(ctx context.Context, in *CheckGatherBaitRequest, opts ...grpc.CallOption) (*CheckGatherBaitResponse, error)
	Leaderboard(ctx context.Context, in *LeaderboardRequest, opts ...grpc.CallOption) (*LeaderboardResponse, error)
	CheckTime(ctx context.Context, in *CheckTimeRequest, opts ...grpc.CallOption) (*CheckTimeResponse, error)
	GetBaitInventory(ctx context.Context, in *GetBaitInventoryRequest, opts ...grpc.CallOption) (*GetBaitInventoryResponse, error)
	BuyBait(ctx context.Context, in *BuyBaitRequest, opts ...grpc.CallOption) (*BuyBaitResponse, error)
	GetBaitTier(ctx context.Context, in *GetBaitTierRequest, opts ...grpc.CallOption) (*GetBaitTierResponse, error)
	SetBaitTier(ctx context.Context, in *SetBaitTierRequest, opts ...grpc.CallOption) (*SetBaitTierResponse, error)
	SellFish(ctx context.Context, in *SellFishRequest, opts ...grpc.CallOption) (*SellFishResponse, error)
}

type fishyClient struct {
	cc *grpc.ClientConn
}

func NewFishyClient(cc *grpc.ClientConn) FishyClient {
	return &fishyClient{cc}
}

func (c *fishyClient) Fishy(ctx context.Context, in *FishRequest, opts ...grpc.CallOption) (*FishResponse, error) {
	out := new(FishResponse)
	err := grpc.Invoke(ctx, "/fishyv3.Fishy/Fishy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishyClient) Inventory(ctx context.Context, in *InventoryRequest, opts ...grpc.CallOption) (*InventoryResponse, error) {
	out := new(InventoryResponse)
	err := grpc.Invoke(ctx, "/fishyv3.Fishy/Inventory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishyClient) GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error) {
	out := new(GetLocationResponse)
	err := grpc.Invoke(ctx, "/fishyv3.Fishy/GetLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishyClient) SetLocation(ctx context.Context, in *SetLocationRequest, opts ...grpc.CallOption) (*SetLocationResponse, error) {
	out := new(SetLocationResponse)
	err := grpc.Invoke(ctx, "/fishyv3.Fishy/SetLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishyClient) BuyItem(ctx context.Context, in *BuyItemRequest, opts ...grpc.CallOption) (*BuyItemResponse, error) {
	out := new(BuyItemResponse)
	err := grpc.Invoke(ctx, "/fishyv3.Fishy/BuyItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishyClient) Blacklist(ctx context.Context, in *BlacklistRequest, opts ...grpc.CallOption) (*BlacklistResponse, error) {
	out := new(BlacklistResponse)
	err := grpc.Invoke(ctx, "/fishyv3.Fishy/Blacklist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishyClient) Unblacklist(ctx context.Context, in *UnblacklistRequest, opts ...grpc.CallOption) (*UnblacklistResponse, error) {
	out := new(UnblacklistResponse)
	err := grpc.Invoke(ctx, "/fishyv3.Fishy/Unblacklist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishyClient) StartGatherBait(ctx context.Context, in *StartGatherBaitRequest, opts ...grpc.CallOption) (*StartGatherBaitResponse, error) {
	out := new(StartGatherBaitResponse)
	err := grpc.Invoke(ctx, "/fishyv3.Fishy/StartGatherBait", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishyClient) CheckGatherBait(ctx context.Context, in *CheckGatherBaitRequest, opts ...grpc.CallOption) (*CheckGatherBaitResponse, error) {
	out := new(CheckGatherBaitResponse)
	err := grpc.Invoke(ctx, "/fishyv3.Fishy/CheckGatherBait", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishyClient) Leaderboard(ctx context.Context, in *LeaderboardRequest, opts ...grpc.CallOption) (*LeaderboardResponse, error) {
	out := new(LeaderboardResponse)
	err := grpc.Invoke(ctx, "/fishyv3.Fishy/Leaderboard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishyClient) CheckTime(ctx context.Context, in *CheckTimeRequest, opts ...grpc.CallOption) (*CheckTimeResponse, error) {
	out := new(CheckTimeResponse)
	err := grpc.Invoke(ctx, "/fishyv3.Fishy/CheckTime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishyClient) GetBaitInventory(ctx context.Context, in *GetBaitInventoryRequest, opts ...grpc.CallOption) (*GetBaitInventoryResponse, error) {
	out := new(GetBaitInventoryResponse)
	err := grpc.Invoke(ctx, "/fishyv3.Fishy/GetBaitInventory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishyClient) BuyBait(ctx context.Context, in *BuyBaitRequest, opts ...grpc.CallOption) (*BuyBaitResponse, error) {
	out := new(BuyBaitResponse)
	err := grpc.Invoke(ctx, "/fishyv3.Fishy/BuyBait", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishyClient) GetBaitTier(ctx context.Context, in *GetBaitTierRequest, opts ...grpc.CallOption) (*GetBaitTierResponse, error) {
	out := new(GetBaitTierResponse)
	err := grpc.Invoke(ctx, "/fishyv3.Fishy/GetBaitTier", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishyClient) SetBaitTier(ctx context.Context, in *SetBaitTierRequest, opts ...grpc.CallOption) (*SetBaitTierResponse, error) {
	out := new(SetBaitTierResponse)
	err := grpc.Invoke(ctx, "/fishyv3.Fishy/SetBaitTier", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishyClient) SellFish(ctx context.Context, in *SellFishRequest, opts ...grpc.CallOption) (*SellFishResponse, error) {
	out := new(SellFishResponse)
	err := grpc.Invoke(ctx, "/fishyv3.Fishy/SellFish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Fishy service

type FishyServer interface {
	Fishy(context.Context, *FishRequest) (*FishResponse, error)
	Inventory(context.Context, *InventoryRequest) (*InventoryResponse, error)
	GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error)
	SetLocation(context.Context, *SetLocationRequest) (*SetLocationResponse, error)
	BuyItem(context.Context, *BuyItemRequest) (*BuyItemResponse, error)
	Blacklist(context.Context, *BlacklistRequest) (*BlacklistResponse, error)
	Unblacklist(context.Context, *UnblacklistRequest) (*UnblacklistResponse, error)
	StartGatherBait(context.Context, *StartGatherBaitRequest) (*StartGatherBaitResponse, error)
	CheckGatherBait(context.Context, *CheckGatherBaitRequest) (*CheckGatherBaitResponse, error)
	Leaderboard(context.Context, *LeaderboardRequest) (*LeaderboardResponse, error)
	CheckTime(context.Context, *CheckTimeRequest) (*CheckTimeResponse, error)
	GetBaitInventory(context.Context, *GetBaitInventoryRequest) (*GetBaitInventoryResponse, error)
	BuyBait(context.Context, *BuyBaitRequest) (*BuyBaitResponse, error)
	GetBaitTier(context.Context, *GetBaitTierRequest) (*GetBaitTierResponse, error)
	SetBaitTier(context.Context, *SetBaitTierRequest) (*SetBaitTierResponse, error)
	SellFish(context.Context, *SellFishRequest) (*SellFishResponse, error)
}

func RegisterFishyServer(s *grpc.Server, srv FishyServer) {
	s.RegisterService(&_Fishy_serviceDesc, srv)
}

func _Fishy_Fishy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishyServer).Fishy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fishyv3.Fishy/Fishy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishyServer).Fishy(ctx, req.(*FishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fishy_Inventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishyServer).Inventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fishyv3.Fishy/Inventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishyServer).Inventory(ctx, req.(*InventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fishy_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishyServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fishyv3.Fishy/GetLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishyServer).GetLocation(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fishy_SetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishyServer).SetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fishyv3.Fishy/SetLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishyServer).SetLocation(ctx, req.(*SetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fishy_BuyItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishyServer).BuyItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fishyv3.Fishy/BuyItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishyServer).BuyItem(ctx, req.(*BuyItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fishy_Blacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishyServer).Blacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fishyv3.Fishy/Blacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishyServer).Blacklist(ctx, req.(*BlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fishy_Unblacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishyServer).Unblacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fishyv3.Fishy/Unblacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishyServer).Unblacklist(ctx, req.(*UnblacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fishy_StartGatherBait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGatherBaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishyServer).StartGatherBait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fishyv3.Fishy/StartGatherBait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishyServer).StartGatherBait(ctx, req.(*StartGatherBaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fishy_CheckGatherBait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckGatherBaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishyServer).CheckGatherBait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fishyv3.Fishy/CheckGatherBait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishyServer).CheckGatherBait(ctx, req.(*CheckGatherBaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fishy_Leaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishyServer).Leaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fishyv3.Fishy/Leaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishyServer).Leaderboard(ctx, req.(*LeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fishy_CheckTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishyServer).CheckTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fishyv3.Fishy/CheckTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishyServer).CheckTime(ctx, req.(*CheckTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fishy_GetBaitInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBaitInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishyServer).GetBaitInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fishyv3.Fishy/GetBaitInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishyServer).GetBaitInventory(ctx, req.(*GetBaitInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fishy_BuyBait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyBaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishyServer).BuyBait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fishyv3.Fishy/BuyBait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishyServer).BuyBait(ctx, req.(*BuyBaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fishy_GetBaitTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBaitTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishyServer).GetBaitTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fishyv3.Fishy/GetBaitTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishyServer).GetBaitTier(ctx, req.(*GetBaitTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fishy_SetBaitTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBaitTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishyServer).SetBaitTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fishyv3.Fishy/SetBaitTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishyServer).SetBaitTier(ctx, req.(*SetBaitTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fishy_SellFish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellFishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishyServer).SellFish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fishyv3.Fishy/SellFish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishyServer).SellFish(ctx, req.(*SellFishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fishy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fishyv3.Fishy",
	HandlerType: (*FishyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fishy",
			Handler:    _Fishy_Fishy_Handler,
		},
		{
			MethodName: "Inventory",
			Handler:    _Fishy_Inventory_Handler,
		},
		{
			MethodName: "GetLocation",
			Handler:    _Fishy_GetLocation_Handler,
		},
		{
			MethodName: "SetLocation",
			Handler:    _Fishy_SetLocation_Handler,
		},
		{
			MethodName: "BuyItem",
			Handler:    _Fishy_BuyItem_Handler,
		},
		{
			MethodName: "Blacklist",
			Handler:    _Fishy_Blacklist_Handler,
		},
		{
			MethodName: "Unblacklist",
			Handler:    _Fishy_Unblacklist_Handler,
		},
		{
			MethodName: "StartGatherBait",
			Handler:    _Fishy_StartGatherBait_Handler,
		},
		{
			MethodName: "CheckGatherBait",
			Handler:    _Fishy_CheckGatherBait_Handler,
		},
		{
			MethodName: "Leaderboard",
			Handler:    _Fishy_Leaderboard_Handler,
		},
		{
			MethodName: "CheckTime",
			Handler:    _Fishy_CheckTime_Handler,
		},
		{
			MethodName: "GetBaitInventory",
			Handler:    _Fishy_GetBaitInventory_Handler,
		},
		{
			MethodName: "BuyBait",
			Handler:    _Fishy_BuyBait_Handler,
		},
		{
			MethodName: "GetBaitTier",
			Handler:    _Fishy_GetBaitTier_Handler,
		},
		{
			MethodName: "SetBaitTier",
			Handler:    _Fishy_SetBaitTier_Handler,
		},
		{
			MethodName: "SellFish",
			Handler:    _Fishy_SellFish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fishy.proto",
}

func init() { proto.RegisterFile("fishy.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0xdd, 0x72, 0xda, 0x46,
	0x14, 0x46, 0x20, 0x82, 0x38, 0xc4, 0xf1, 0x7a, 0xfd, 0x27, 0xe3, 0x76, 0x6a, 0x2b, 0xd3, 0x0c,
	0x65, 0x1a, 0xcf, 0x14, 0xb7, 0xbd, 0x69, 0xd3, 0x19, 0xb0, 0x31, 0xa6, 0x61, 0x4c, 0x47, 0x72,
	0x9c, 0xa6, 0x37, 0x1e, 0x81, 0xb7, 0xa0, 0x09, 0x92, 0xa8, 0x24, 0x12, 0xf3, 0x08, 0x7d, 0x92,
	0xbe, 0x44, 0x1f, 0xa1, 0x0f, 0xd5, 0xd9, 0xd5, 0x4a, 0xac, 0x7e, 0x42, 0xb8, 0xd2, 0xfe, 0x7c,
	0xfb, 0xed, 0x39, 0x67, 0xcf, 0x39, 0x1f, 0x40, 0xed, 0x4f, 0xcb, 0x9f, 0x2e, 0xcf, 0xe6, 0x9e,
	0x1b, 0xb8, 0xb8, 0xc2, 0x26, 0x1f, 0xce, 0xeb, 0x30, 0xb3, 0x4d, 0x37, 0x5c, 0xd4, 0x5e, 0x00,
	0xea, 0x3b, 0x1f, 0x88, 0x13, 0xb8, 0xde, 0x52, 0x27, 0x7f, 0x2d, 0x88, 0x1f, 0x60, 0x0c, 0xf2,
	0xc2, 0x27, 0x9e, 0x2a, 0x9d, 0x48, 0x8d, 0xaa, 0xce, 0xc6, 0xda, 0xbf, 0x12, 0xec, 0x08, 0x40,
	0x7f, 0xee, 0x3a, 0x3e, 0xc1, 0x0d, 0x28, 0x5b, 0x01, 0xb1, 0x7d, 0x06, 0xad, 0xb5, 0xf0, 0x19,
	0xbf, 0xe2, 0xec, 0x8d, 0x4f, 0xbc, 0x3e, 0xdd, 0xd1, 0x43, 0x00, 0x6e, 0x82, 0x4c, 0xf7, 0xd4,
	0x22, 0x03, 0x1e, 0xc4, 0xc0, 0x2b, 0xcb, 0x9f, 0xae, 0x78, 0x19, 0x06, 0x1f, 0x81, 0x62, 0x9b,
	0x8f, 0xf7, 0x0c, 0x5f, 0x3a, 0x91, 0x1a, 0x65, 0xbd, 0x62, 0x9b, 0x8f, 0x57, 0xc2, 0xd6, 0xc8,
	0xb4, 0x02, 0x55, 0x8e, 0xb7, 0x3a, 0xa6, 0x15, 0xe0, 0x63, 0xa8, 0x52, 0x4b, 0xef, 0x03, 0x8b,
	0x78, 0x6a, 0x99, 0xed, 0x29, 0x74, 0xe1, 0xd6, 0x22, 0x9e, 0xd6, 0x00, 0xdc, 0x23, 0xc1, 0xc0,
	0x1d, 0x9b, 0x81, 0xe5, 0x3a, 0xeb, 0x1c, 0xbd, 0x84, 0xdd, 0x04, 0x92, 0x7b, 0xfa, 0x12, 0x94,
	0x19, 0x5f, 0x63, 0xf0, 0x67, 0xad, 0x9d, 0xd8, 0x87, 0x18, 0x1c, 0x43, 0xb4, 0xb7, 0x80, 0x8d,
	0x8d, 0xee, 0x4b, 0x10, 0x17, 0x3f, 0x4f, 0xbc, 0x0f, 0xbb, 0x46, 0xd6, 0x3c, 0xad, 0x07, 0xcf,
	0x3a, 0x8b, 0x25, 0x8d, 0x78, 0x74, 0xd7, 0x29, 0xc8, 0x34, 0xf2, 0xdc, 0xd8, 0xad, 0x98, 0x93,
	0x61, 0xd8, 0x16, 0x35, 0x87, 0x05, 0xab, 0xc8, 0x82, 0xc5, 0xc6, 0xda, 0x0e, 0x6c, 0xc7, 0x44,
	0x9c, 0xfb, 0x05, 0xa0, 0xce, 0xcc, 0x1c, 0xbf, 0x9f, 0x59, 0x7e, 0xb0, 0x2e, 0x72, 0xbb, 0xb0,
	0x23, 0xe0, 0xf8, 0xe1, 0x06, 0xe0, 0x37, 0xce, 0x68, 0x93, 0xe3, 0xfb, 0xb0, 0x9b, 0x40, 0x72,
	0x82, 0x6f, 0xe1, 0xc0, 0x08, 0x4c, 0x2f, 0xe8, 0x99, 0xc1, 0x94, 0x78, 0xf4, 0xa5, 0xd7, 0x91,
	0x1c, 0xc1, 0x61, 0x06, 0xbd, 0x22, 0xba, 0x98, 0x92, 0xf1, 0xfb, 0x8d, 0x89, 0x32, 0x68, 0x4e,
	0xf4, 0xb7, 0x04, 0x78, 0x40, 0xcc, 0x07, 0xe2, 0x8d, 0x5c, 0xd3, 0x7b, 0x88, 0x58, 0x0e, 0xe0,
	0xc9, 0x64, 0xe6, 0x8e, 0xcc, 0x19, 0xe3, 0x51, 0x74, 0x3e, 0xa3, 0xec, 0x73, 0x73, 0x42, 0xa2,
	0x28, 0xd3, 0x71, 0x7c, 0x63, 0x49, 0x48, 0x84, 0x3d, 0x28, 0x4f, 0x16, 0xd6, 0xec, 0x81, 0xe5,
	0x75, 0x55, 0x0f, 0x27, 0xf8, 0x4b, 0x00, 0x36, 0xb8, 0x77, 0x4c, 0x9b, 0xb0, 0xb4, 0xae, 0xea,
	0x55, 0xb6, 0x72, 0x63, 0xda, 0x44, 0xeb, 0xc2, 0x6e, 0xc2, 0x14, 0x9e, 0xad, 0x67, 0x50, 0xa6,
	0x9c, 0xb4, 0x2e, 0x4b, 0x8d, 0x5a, 0x4b, 0x5d, 0x65, 0xd4, 0x0a, 0x4c, 0x4b, 0x54, 0x0f, 0x61,
	0xda, 0x4f, 0xb0, 0x9d, 0xda, 0xc9, 0xcd, 0xd5, 0x3d, 0x28, 0xfb, 0x63, 0xd7, 0x8b, 0x7c, 0x09,
	0x27, 0xda, 0x4b, 0x38, 0xec, 0x91, 0x80, 0x86, 0x68, 0xa3, 0x4e, 0xf2, 0x9f, 0x04, 0x6a, 0x16,
	0xcf, 0x0d, 0x17, 0xeb, 0x5b, 0x4a, 0xd6, 0xf7, 0x73, 0xd8, 0x1a, 0x2f, 0x3c, 0x8f, 0x38, 0xc1,
	0xfd, 0xd8, 0x5d, 0x38, 0x01, 0x37, 0xe2, 0x29, 0x5f, 0xbc, 0xa0, 0x6b, 0xb4, 0xcd, 0xb0, 0xb3,
	0xa5, 0x54, 0x9b, 0x49, 0xde, 0xc6, 0x30, 0xf8, 0x14, 0xa2, 0xb3, 0x61, 0xcf, 0x08, 0xfb, 0x49,
	0x8d, 0xaf, 0xd1, 0xb6, 0x41, 0x21, 0x14, 0x3a, 0x72, 0x1f, 0xc5, 0xb6, 0x52, 0xe3, 0x6b, 0xac,
	0xb3, 0x8c, 0x59, 0xe5, 0x7d, 0x26, 0x9d, 0xf0, 0xd7, 0x42, 0xa9, 0x89, 0x15, 0x4e, 0xcf, 0x51,
	0x9a, 0xb0, 0xfa, 0x68, 0x0e, 0x99, 0x36, 0x73, 0x2e, 0xec, 0x7b, 0x7c, 0xa6, 0x3d, 0x67, 0x55,
	0x29, 0x66, 0x21, 0x46, 0x50, 0x72, 0xc8, 0x47, 0x1e, 0x24, 0x3a, 0xe4, 0x3d, 0x2e, 0x66, 0x5c,
	0xf3, 0x04, 0x3f, 0xb3, 0x1e, 0xb7, 0x42, 0x72, 0xca, 0xc8, 0x48, 0x69, 0xad, 0x91, 0xda, 0x90,
	0xf5, 0xb6, 0x0d, 0xee, 0xd9, 0xd0, 0x6b, 0xde, 0xd3, 0xd2, 0xe6, 0x68, 0xbf, 0xc1, 0xb6, 0x41,
	0x66, 0x33, 0xda, 0xf7, 0xd7, 0x5d, 0xf2, 0x0d, 0xc8, 0xc1, 0x72, 0x4e, 0xf8, 0x25, 0xfb, 0x09,
	0x65, 0xb9, 0x30, 0x03, 0x32, 0x61, 0x2f, 0x4e, 0x21, 0x5a, 0x03, 0xd0, 0x8a, 0x91, 0x3b, 0xbd,
	0x07, 0xe5, 0x8f, 0xae, 0x17, 0x4c, 0x79, 0x24, 0xc3, 0x89, 0x86, 0x01, 0xb1, 0xf2, 0xbf, 0xb5,
	0x6c, 0xc2, 0x2f, 0xd7, 0xde, 0xc2, 0x8e, 0xb0, 0xc6, 0x8f, 0xb3, 0x1e, 0x6a, 0x93, 0xc8, 0x22,
	0x3a, 0xc6, 0x2a, 0x54, 0x6c, 0xd7, 0x73, 0x2c, 0x67, 0xc2, 0x8c, 0x52, 0xf4, 0x68, 0x4a, 0x2f,
	0x73, 0xac, 0xc9, 0x34, 0x7c, 0x5e, 0x45, 0x0f, 0x27, 0xcd, 0x57, 0xf0, 0x54, 0x34, 0x16, 0x2b,
	0x20, 0x5f, 0xf5, 0x8d, 0x6b, 0x54, 0xc0, 0x5b, 0x50, 0x1d, 0x74, 0x7b, 0xdd, 0x9b, 0xcb, 0xb6,
	0xfe, 0x0e, 0x49, 0xb8, 0x06, 0x95, 0x5e, 0x5b, 0xef, 0xb4, 0x7b, 0x5d, 0x54, 0xc4, 0x15, 0x28,
	0xb5, 0x07, 0x03, 0x54, 0x6a, 0xbe, 0x02, 0x99, 0xf6, 0x6b, 0x7a, 0xac, 0xd3, 0xee, 0xdf, 0xa2,
	0x02, 0xdd, 0xd2, 0x87, 0x97, 0x48, 0xa2, 0x4b, 0xd7, 0xc3, 0xe1, 0x6b, 0x54, 0xa4, 0x47, 0xef,
	0xba, 0xd7, 0xfd, 0x8b, 0x41, 0x17, 0x95, 0xe8, 0x84, 0x22, 0x3b, 0xc3, 0xdf, 0x91, 0xdc, 0x6c,
	0x82, 0x12, 0xc9, 0x09, 0xc5, 0x0f, 0xda, 0xaf, 0xbb, 0xa8, 0x80, 0xab, 0x50, 0xd6, 0xfb, 0x77,
	0x5d, 0x1d, 0x49, 0x74, 0x38, 0xbc, 0xe8, 0xb6, 0x6f, 0x50, 0xb1, 0xd9, 0x02, 0x25, 0x7a, 0x26,
	0xfc, 0x04, 0x8a, 0xb7, 0xdf, 0xa1, 0x02, 0xfb, 0xb6, 0x90, 0xc4, 0xbe, 0xe7, 0xa8, 0xc8, 0xbe,
	0xdf, 0xa3, 0x12, 0xfb, 0xfe, 0x80, 0xe4, 0xd6, 0x3f, 0x55, 0x28, 0x53, 0xf7, 0x96, 0xf8, 0xc7,
	0x68, 0xb0, 0x97, 0x78, 0x24, 0x1e, 0xdf, 0xfa, 0x7e, 0x6a, 0x95, 0xa7, 0x41, 0x01, 0x5f, 0x42,
	0x35, 0xae, 0x5d, 0x7c, 0xb4, 0x52, 0xb2, 0x54, 0xb7, 0xa9, 0xd7, 0xf3, 0xb6, 0x62, 0x96, 0x5f,
	0xa1, 0x26, 0x08, 0x3b, 0x3e, 0x8e, 0xc1, 0xd9, 0x1f, 0x06, 0xf5, 0x2f, 0xf2, 0x37, 0x45, 0x2e,
	0x23, 0x97, 0xcb, 0x58, 0xc7, 0x65, 0xe4, 0x72, 0xfd, 0x02, 0x15, 0xae, 0xb8, 0xf8, 0x70, 0x55,
	0x21, 0x09, 0x31, 0xaf, 0xab, 0xd9, 0x0d, 0x31, 0x3a, 0xb1, 0xec, 0x0a, 0xd1, 0x49, 0x4b, 0xb6,
	0x10, 0x9d, 0xac, 0x4a, 0x33, 0x8f, 0x04, 0xf5, 0x15, 0x3c, 0xca, 0xaa, 0xb7, 0xe0, 0x51, 0x9e,
	0x60, 0x17, 0xf0, 0x1d, 0x6c, 0xa7, 0x44, 0x18, 0x7f, 0xb5, 0x0a, 0x42, 0xae, 0x98, 0xd7, 0x4f,
	0x3e, 0x0d, 0x10, 0x79, 0x53, 0x9a, 0x2c, 0xf0, 0xe6, 0x6b, 0xbb, 0xc0, 0xfb, 0x29, 0x39, 0x67,
	0xbe, 0x0b, 0xea, 0x27, 0xf8, 0x9e, 0x55, 0x79, 0xc1, 0xf7, 0x1c, 0xdd, 0x0d, 0x5f, 0x23, 0x6e,
	0x12, 0xc2, 0x6b, 0xa4, 0x9b, 0x89, 0xf0, 0x1a, 0x99, 0x9e, 0xa2, 0x15, 0xf0, 0x3b, 0x40, 0x69,
	0x89, 0xc4, 0x27, 0x62, 0x4e, 0xe6, 0xa9, 0x6d, 0xfd, 0x74, 0x0d, 0x22, 0x95, 0x6e, 0x2c, 0x78,
	0x89, 0x74, 0x13, 0x83, 0xa6, 0x66, 0x37, 0x52, 0x65, 0x14, 0x77, 0x81, 0xe3, 0xf4, 0x9d, 0x82,
	0x26, 0x24, 0xcb, 0x28, 0xd3, 0xdf, 0xa3, 0x32, 0xca, 0xe1, 0x32, 0xd6, 0x71, 0x19, 0xb9, 0x5c,
	0x6d, 0x50, 0xa2, 0xde, 0x8e, 0x55, 0x01, 0x9b, 0x10, 0x90, 0xfa, 0x51, 0xce, 0x4e, 0x44, 0xd1,
	0x91, 0xff, 0x28, 0xce, 0x47, 0xa3, 0x27, 0xec, 0x8f, 0xd1, 0xf9, 0xff, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xc7, 0xe9, 0x07, 0xf0, 0x3c, 0x0d, 0x00, 0x00,
}
